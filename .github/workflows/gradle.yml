# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Set environment variables
      run: |
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_ENV
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
        echo "DATASOURCE_URL=${{ secrets.DATASOURCE_URL }}" >> $GITHUB_ENV
        echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}" >> $GITHUB_ENV
        echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}" >> $GITHUB_ENV
        echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> $GITHUB_ENV
        echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> $GITHUB_ENV
        echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "UNIVCERT_KEY=${{ secrets.UNIVCERT_KEY }}" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}" >> $GITHUB_ENV 
        echo "FIREBASE_CONFIG_PATH=${{ secrets.FIREBASE_CONFIG_PATH }}" >> $GITHUB_ENV
        echo "FIREBASE_URL=${{ secrets.FIREBASE_URL }}" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Docker build & push to Docker hub
      run: |
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64/v8 --push --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .

      # docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}

      # EC2 배포
    - name: SSH into EC2 and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }} # pem 키
       # 도커 작업
        script: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          docker stop $(docker ps -a -q) || true
          docker rm $(docker ps -a -q) || true
#          docker run -d --log-driver=syslog -p 8080:8080 -e SPRING_PROFILES_ACTIVE=prod ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          docker run -d \
          --log-driver=syslog \
          -p 8080:8080 \
          -e SPRING_PROFILES_ACTIVE=prod \
          -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
          -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
          -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
          -e DATASOURCE_URL=${{ secrets.DATASOURCE_URL }} \
          -e DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \
          -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
          -e NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
          -e NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} \
          -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
          -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
          -e UNIVCERT_KEY=${{ secrets.UNIVCERT_KEY }} \
          -e AWS_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }} \
          -e AWS_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }} \
          -e FIREBASE_CONFIG_PATH=${{ secrets.FIREBASE_CONFIG_PATH }} \
          -e FIREBASE_URL=${{ secrets.FIREBASE_URL }} \
          ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest      
          docker image prune -a -f || true

# S3 + Code Deploy
#    - name: Make Zip File
#      run: zip -qq -r ./$GITHUB_SHA.zip .
#      shell: bash
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
#        aws-region: ap-northeast-2
#
#    - name: Upload to S3
#      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://five-spring-boot/back-end-api/$GITHUB_SHA.zip
#
#    - name: Code Deploy To EC2 instance
#      run: aws deploy create-deployment
#           --application-name five_spring_boot
#           --deployment-config-name CodeDeployDefault.AllAtOnce
#           --deployment-group-name five_spring_boot
#           --s3-location bucket=five-spring-boot,bundleType=zip,key=back-end-api/$GITHUB_SHA.zip
#

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
