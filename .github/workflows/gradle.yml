name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker build & push to Docker hub
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64/v8 --push --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
            docker stop $(docker ps -a -q) || true
            docker rm $(docker ps -a -q) || true
            docker run -d \
              --log-driver=syslog \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e spring.data.redis.host=${{ secrets.REDIS_HOST }} \
              -e spring.data.redis.port=${{ secrets.REDIS_PORT }} \
              -e spring.jwt.secret=${{ secrets.JWT_SECRET }} \
              -e spring.datasource.url=${{ secrets.DATASOURCE_URL }} \
              -e spring.datasource.username=${{ secrets.DATASOURCE_USERNAME }} \
              -e spring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }} \
              -e spring.security.oauth2.client.registration.naver.client-id=${{ secrets.NAVER_CLIENT_ID }} \
              -e spring.security.oauth2.client.registration.naver.client-secret=${{ secrets.NAVER_CLIENT_SECRET }} \
              -e spring.security.oauth2.client.registration.naver.redirect-uri=${{ secrets.NAVER_REDIRECT_URI }} \
              -e spring.security.oauth2.client.registration.naver.authorization-grant-type=${{ secrets.NAVER_AUTHORIZATION_GRANT_TYPE }} \
              -e spring.security.oauth2.client.provider.naver.authorization-uri=${{ secrets.NAVER_AUTHORIZATION_URI }} \
              -e spring.security.oauth2.client.provider.naver.token-uri=${{ secrets.NAVER_TOKEN_URI }} \
              -e spring.security.oauth2.client.provider.naver.user-info-uri=${{ secrets.NAVER_USER_INFO_URI }} \
              -e spring.security.oauth2.client.provider.naver.user-name-attribute=${{ secrets.NAVER_USER_NAME_ATTRIBUTE }} \
              -e spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }} \
              -e spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }} \
              -e spring.security.oauth2.client.registration.kakao.redirect-uri=${{ secrets.KAKAO_REDIRECT_URI }} \
              -e spring.security.oauth2.client.registration.kakao.authorization-grant-type=${{ secrets.KAKAO_AUTHORIZATION_GRANT_TYPE }} \
              -e spring.security.oauth2.client.provider.kakao.authorization-uri=${{ secrets.KAKAO_AUTHORIZATION_URI }} \
              -e spring.security.oauth2.client.provider.kakao.token-uri=${{ secrets.KAKAO_TOKEN_URI }} \
              -e spring.security.oauth2.client.provider.kakao.user-info-uri=${{ secrets.KAKAO_USER_INFO_URI }} \
              -e api.univcert.key=${{ secrets.UNIVCERT_KEY }} \
              -e cloud.aws.credentials.access-key=${{ secrets.AWS_S3_ACCESS_KEY }} \
              -e cloud.aws.credentials.secret-key=${{ secrets.AWS_S3_SECRET_KEY }} \
              -e cloud.aws.region.static=${{ secrets.AWS_S3_REGION }} \
              -e cloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET }} \
              -e firebase.config-path=${{ secrets.FIREBASE_CONFIG_PATH }} \
              -e firebase.url=${{ secrets.FIREBASE_URL }} \
              -e websocket.chat-path=${{ secrets.WEBSOCKET_CHAT_PATH }} \
              -e websocket.unread-path=${{ secrets.WEBSOCKET_UNREAD_PATH }} \
              -e websocket.notification-path=${{ secrets.WEBSOCKET_NOTIFICATION_PATH }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest 
            docker image prune -a -f || true

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Generate and submit dependency graph
        uses: gradle/gradle-build-action@v2
